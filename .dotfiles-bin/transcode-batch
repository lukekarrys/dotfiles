#!/usr/bin/env bash

if [ -z "$TRANSCODE_BATCH_WORK_DIR" ]; then
    echo "export \$TRANSCODE_BATCH_WORK_DIR must be set"
    exit 1
fi

readonly work="$TRANSCODE_BATCH_WORK_DIR"
readonly queue="$work/queue"
readonly crops="$work/crops"
readonly params="$work/params"

readonly cmd="$1"
readonly original="$2"
readonly filename="$(basename "${original%.*}")"
readonly option="$3"

usage(){
    local cmdname="transcode-batch"
    echo "Usage:"
    echo ""
    echo "Start batch transcoding: $cmdname"
    echo ""
    echo "Start batch transcoding for iOS: $cmdname ios"
    echo ""
    echo "Add file to batch queue: $cmdname queue \$file"
    echo ""
    echo "Add crop value for file: $cmdname crop \$file 140:140:0:0"
    echo ""
    echo "Add other params for file: $cmdname param \$file \"--add-audio 4\""
    echo ""
    exit 1
}

error(){
    echo "Error: $1"
    echo ""
}

if [ ! -z "$filename" ] && [ ! -f "$original" ]; then
    error "$filename must exist"
    usage
fi

if [ ! -z "$filename" ] && [ -z "$cmd" ]; then
    error "If passing in a file, a command must also be used"
    usage
fi

if [ "$cmd" == "queue" ]; then
    echo "$filename" >> $queue
    exit 0
elif [ "$cmd" == "crop" ]; then
    if [ -z "$option" ]; then
        error "Crop requires a value"
        usage
    fi
    echo "$3" > "$crops/$filename"
    exit 0
elif [ "$cmd" == "param" ]; then
    if [ -z "$option" ]; then
        error "Param requires a value"
        usage
    fi
    echo "$3" > "$params/$filename"
    exit 0
fi

input="$(sed -n 1p "$queue")"

while [ "$input" ]; do
    title_name="$(basename "$input" | sed 's/\.[^.]*$//')"
    crop_file="$crops/${title_name}"
    param_file="$params/${title_name}"
    build_args=()

    if [ -f "$crop_file" ]; then
        build_args+=("--crop")
        build_args+=("$(cat "$crop_file")")
    fi

    if [ -f "$param_file" ]; then
        build_args+=("$(cat "$param_file")")
    fi

    build_args+=(\""originals/${input}.mkv"\")

    sed -i '' 1d "$queue" || exit 1

    if [ "$cmd" == "ios" ]; then
        eval transcode-video --m4v --veryquick --verbose --output "ios/" "${build_args[@]}"
    else
        eval transcode-video --abr --target big --quick --verbose --output "output/" "${build_args[@]}"
    fi

    input="$(sed -n 1p "$queue")"
done
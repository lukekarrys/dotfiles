if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

			# Check for unpushed commits
			local aheadStatus=$(git status 2> /dev/null | sed -n 2p)
			if [ "${aheadStatus:0:20}" == "Your branch is ahead" ]; then
				s+='^';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

function rvm_prompt() {
	[[ -n $(~/.rvm/bin/rvm-prompt) ]] && ~/.rvm/bin/rvm-prompt
}

function node_prompt() {
	[[ -n $(node -v) ]] && node -v
}

if tput setaf 1 &> /dev/null; then
	tput sgr0
	magenta=$(tput setaf 9)
	orange=$(tput setaf 172)
	green=$(tput setaf 190)
	purple=$(tput setaf 141)
	white=$(tput setaf 0)
	blue=$(tput setaf 33);
	bold=$(tput bold)
	reset=$(tput sgr0)
else
	magenta="\033[1;31m"
	orange="\033[1;33m"
	green="\033[1;32m"
	purple="\033[1;35m"
	white="\033[1;37m"
	blue="\e[1;34m";
	bold=""
	reset="\033[m"
fi

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${magenta}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${orange}";
fi;


#export PS1="\[${BOLD}${MAGENTA}\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\] node-\$(node_prompt)\[$WHITE\]\[$WHITE\] \$(rvm_prompt)\[$WHITE\]\n\$ \[$RESET\]"
#export PS2="\[$ORANGE\]→ \[$RESET\]"

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${white}\] at ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # working directory
PS1+="\$(prompt_git \"${white} on ${purple}\")"; # Git repository details
PS1+="\[${white}\] node-$(node_prompt)"; # Node version
PS1+="\[${white}\] $(rvm_prompt)"; # Ruby version
PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${orange}\]→ \[${reset}\]";
export PS2;

#!/usr/bin/env node

const { parseArgs } = require('util')
const sodium = require('{{ joinPath .npmBinsDir "node_modules" "libsodium-wrappers" }}')
const spawn = require('{{ joinPath .npmBinsDir "node_modules" "@npmcli/promise-spawn" }}')

class GH {
  #repo

  constructor(repo) {
    this.#repo = repo
  }

  async api(endpoint, { method, fields = {} } = {}) {
    const args = [
      'api',
      ...(method ? ['--method', method] : []),
      '-H',
      'Accept: application/vnd.github+json',
      '-H',
      'X-GitHub-Api-Version: 2022-11-28',
      endpoint.replace('/OWNER/REPO/', `/${this.#repo}/`),
      ...Object.entries(fields).reduce((acc, [k, v]) => {
        return acc.concat(['-f', `${k}='${v}'`])
      }, []),
    ].filter(Boolean)

    const res = await spawn('gh', args)
    let data = {}
    try {
      data = JSON.parse(res.stdout)
    } catch {}
    if (res.code !== 0) {
      throw new Error(`Code: ${res.code} ${res.stderr} ${JSON.stringify(data)}`)
    }
    return data
  }

  async #getPublicKey() {
    return this.api(`/repos/OWNER/REPO/actions/secrets/public-key`)
  }

  async createRepositorySecret(name, value) {
    const publicKey = await this.#getPublicKey()

    await sodium.ready

    const binkey = sodium.from_base64(
      publicKey.key,
      sodium.base64_variants.ORIGINAL
    )
    const binsec = sodium.from_string(value)
    const encBytes = sodium.crypto_box_seal(binsec, binkey)

    const encryptedValue = sodium.to_base64(
      encBytes,
      sodium.base64_variants.ORIGINAL
    )

    return this.api(`/repos/OWNER/REPO/actions/secrets/${name}`, {
      method: 'PUT',
      fields: {
        encrypted_value: encryptedValue,
        key_id: publicKey.key_id,
      },
    })
  }

  getRepoitorySecret(name) {
    return this.api(`/repos/OWNER/REPO/actions/secrets/${name}`).catch(
      () => null
    )
  }
}

const getArgs = async () => {
  const { values } = parseArgs({
    args: process.argv.slice(2),
    allowPositionals: false,
    options: {
      repo: {
        type: 'string',
        short: 'R',
      },
      name: {
        type: 'string',
        short: 'N',
        default: 'PUBLISH_TOKEN',
      },
      secret: {
        type: 'string',
        short: 'S',
      },
      force: {
        type: 'boolean',
      },
    },
  })

  if (!values.secret && !process.stdin.isTTY) {
    values.secret = ''
    process.stdin.on('data', (d) => (values.secret += d.toString().trim()))
    await new Promise((resolve) => process.stdin.on('end', resolve))
  }

  return values
}

const main = async () => {
  const { repo, name, secret, force } = await getArgs()

  const gh = new GH(repo)
  const current = await gh.getRepoitorySecret(name)

  if (!secret) {
    return current
  }

  if (current) {
    const msg = `${repo} already has a repository secret named \`${name}\` last updated ${current.updated_at}`
    if (!force) {
      throw new Error(`${msg}\nRerun with \`--force\` to update it anyways`)
    }
    console.error(`${msg}\nUpdating with \`--force.\``)
  }

  return gh.createRepositorySecret(name, secret)
}

main()
  .then(console.log)
  .catch((err) => {
    process.exitCode = 1
    console.error(err)
  })

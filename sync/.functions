# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@";
}

# turn mkv into mp4
function mp4() {
    ffmpeg -i `basename $@` -c:v copy -c:a copy `basename $@ .mkv`.mp4
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git --no-pager diff --no-index --color "$@" | diff-so-fancy;
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		code .;
	else
		code "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function sayall {
    for voice in Agnes Kathy Princess Vicki Victoria Bruce Fred Junior Ralph Albert "Bad News" Bahh Bells Boing Bubbles Cellos Deranged "Good News" Hysterical "Pipe Organ" Trinoids Whisper Zarvox; do
        echo $voice
        say -v "$voice" "$@"
    done
}

# remove voices that have their own cadence
function sayalls {
    for voice in Agnes Kathy Princess Vicki Victoria Bruce Fred Junior Ralph Albert Bahh Boing Bubbles Deranged Trinoids Whisper Zarvox; do
        say -v "$voice" "$@" &
    done
}

function trash() {
  local trash_dir="${HOME}/.Trash"
  local temp_ifs="$IFS"
  IFS=$'\n'
  for item in "$@"; do
    if [[ -e "$item" ]]; then
      item_name="$(basename $item)"
      if [[ -e "${trash_dir}/${item_name}" ]]; then
        mv -f "$item" "${trash_dir}/${item_name} $(date "+%H-%M-%S")"
      else
        mv -f "$item" "${trash_dir}/"
      fi
    fi
  done
  IFS=$temp_ifs
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
    local port="${1:-4000}";
    local ip=$(ipconfig getifaddr en0);
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}";
}

function findprocess() {
    ps -x | grep "ttys" | grep "$@" | grep -v "grep"
}

function rungist() {
    curl -s $@ | node
}

function findport() {
    sudo lsof -n -i4TCP:$@ | grep LISTEN
}

function ssh-add-all {
  for file in $HOME/.ssh/keys/*; do
    ssh-add -K "$file";
  done;
  unset file;
}

function ssh-tunnel {
  ssh -NTnf -L $@
}

function gitignore() {
  curl -s https://raw.githubusercontent.com/github/gitignore/master/$1.gitignore
}

function license() {
  curl -s https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/_licenses/$1.txt | sed '1,/---/d' | tail -n +2 | head -n -1 | sed "s/\[fullname\]/$GIT_AUTHOR_NAME/" | sed "s/\[year\]/`date +%Y`/"
}

function make-electron-app() {
  nativefier -f --name $@ /Applications
  mv /Applications/$1-darwin-x64/$1.app /Applications/$1.app && rm -rf /Applications/$1-darwin-x64
}

function delete-electron-app() {
  rm -rf /Applications/$1.app
  rm -rf $HOME/Library/Application\ Support/`echo "$1" | tr '[:upper:]' '[:lower:]'`-nativefier-*
}

# Schedule sleep at a certain time, use like: sleep-at 60
function sleep-at() {
  local at=$1
  local d=`date +"%m/%d/%y"`
  echo "$d ${at}:00"
  sudo pmset schedule sleep "$d ${at}:00"
}

function transcode-queue() {
  ssh $@ "ps -x | grep \[t\]ranscode-video | sed 's/\(.*\)originals\/\(.*\).mkv/\2 -- inprogress/'; cat /Volumes/Data/makemkv/queue"
}

function pc() {
  prettier $@ $(git diff --name-only; ; git ls-files --others --exclude-standard)
}

# What protocol to use when performing git operations. Supported values: ssh, https
git_protocol: ssh
# What editor gh should run when creating issues, pull requests, etc. If blank, will refer to environment.
editor: code -r
# When to interactively prompt. This is a global config that cannot be overridden by hostname. Supported values: enabled, disabled
prompt: enabled
# A pager program to send command output to, e.g. "less". Set the value to "cat" to disable the pager.
pager: cat
# Aliases allow you to create nicknames for gh commands
aliases:
    co: pr checkout
    dependabot: |
        api graphql -f query='query {
          search (query: "org:npm topic:npm-cli -repo:npm/abbrev-js", type: REPOSITORY, first: 100) {
            nodes {
              ... on Repository {
                nameWithOwner
                pullRequests (labels: ["dependencies"], first: 100, states: [OPEN]) {
                  nodes {
                    number
                    url
                    title
                  }
                }
              }
            }
          }
        }'
        --template
        '{{range $repo := .data.search.nodes -}}
          {{range $pr := $repo.pullRequests.nodes -}}
            {{ tablerow (print $repo.nameWithOwner (print "#" $pr.number | autocolor "green")) ($pr.title) ($pr.url) }}
          {{- end}}
        {{- end}}'
    autoreleases: |
        api graphql -f query='query {
          search (query: "org:npm topic:npm-cli -repo:npm/abbrev-js", type: REPOSITORY, first: 100) {
            nodes {
              ... on Repository {
                nameWithOwner
                pullRequests (labels: ["autorelease: pending"], first: 100, states: [OPEN]) {
                  nodes {
                    number
                    url
                    title
                  }
                }
              }
            }
          }
        }'
        --template
        '{{range $repo := .data.search.nodes -}}
          {{range $pr := $repo.pullRequests.nodes -}}
            {{ tablerow (print $repo.nameWithOwner (print "#" $pr.number | autocolor "green")) ($pr.title) ($pr.url) }}
          {{- end}}
        {{- end}}'
    ls-repos-name: |-
        api graphql -F search='$1 archived:false' -f query='query ($search: String!) {
          search (query: $search, type: REPOSITORY, first: 100) {
            nodes {
              ... on Repository {
                name
              }
            }
          }
        }' --jq '.data.search.nodes[].name'
